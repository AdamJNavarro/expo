{"version":3,"file":"StoreReview.js","sourceRoot":"","sources":["../src/StoreReview.ts"],"names":[],"mappings":"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","sourcesContent":["import { deprecate, Platform, UnavailabilityError, CodedError } from '@unimodules/core';\nimport Constants from 'expo-constants';\nimport * as Linking from 'expo-linking';\n\nimport StoreReview from './ExpoStoreReview';\nimport { StoreReviewPreviewOptions, StoreReviewPreviewResultType } from './StoreReview.types';\n\n/**\n * Determine if the platform has the capabilities to use `requestedReview`\n * - iOS: `true` if iOS 10.3 or greater and the StoreKit framework is linked\n * - Android: Always `true` (open URL to app store)\n * - web: Always `false`\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return StoreReview.isAvailableAsync();\n}\n\n/**\n * @deprecated use `isAvailableAsync()` instead\n */\nexport function isSupported(): void {\n  deprecate('expo-store-review', 'StoreReview.isSupported', {\n    replacement: 'StoreReview.isAvailableAsync',\n  });\n}\n\n/**\n * Use the iOS `SKStoreReviewController` API to prompt a user rating without leaving the app,\n * or open a web browser to the play store on Android.\n */\nexport async function requestReview(): Promise<void> {\n  if (StoreReview?.requestReviewAsync) {\n    await StoreReview.requestReviewAsync();\n    return;\n  }\n  // If StoreReview is unavailable then get the store URL from `app.config.js` or `app.json` and open the store\n  const url = storeUrl();\n  if (url) {\n    const supported = await Linking.canOpenURL(url);\n    if (!supported) {\n      console.warn(\"Expo.StoreReview.requestReview(): Can't open store url: \", url);\n    } else {\n      await Linking.openURL(url);\n    }\n  } else {\n    // If the store URL is missing, let the dev know.\n    console.warn(\n      \"Expo.StoreReview.requestReview(): Couldn't link to store, please make sure the `android.playStoreUrl` & `ios.appStoreUrl` fields are filled out in your `app.json`\"\n    );\n  }\n}\n\n/**\n * Get your app's store URLs from `app.config.js` or `app.json`:\n * - iOS: https://docs.expo.io/versions/latest/workflow/configuration#appstoreurlurl-to-your-app-on-the-apple-app-store-if-you-have-deployed-it-there-this-is-used-to-link-to-your-store-page-from-your-expo-project-page-if-your-app-is-public\n * - Android: https://docs.expo.io/versions/latest/workflow/configuration#playstoreurlurl-to-your-app-on-the-google-play-store-if-you-have-deployed-it-there-this-is-used-to-link-to-your-store-page-from-your-expo-project-page-if-your-app-is-public\n * - web: returns `null`\n */\nexport function storeUrl(): string | null {\n  const { manifest } = Constants;\n  // eslint-disable-next-line no-undef\n  if (Platform.OS === 'ios' && manifest?.ios) {\n    return manifest.ios.appStoreUrl;\n    // eslint-disable-next-line no-undef\n  } else if (Platform.OS === 'android' && manifest?.android) {\n    return manifest.android.playStoreUrl;\n  }\n  return null;\n}\n\n/**\n * A flag to detect if this module can do anything.\n */\nexport async function hasAction(): Promise<boolean> {\n  return !!storeUrl() || (await isAvailableAsync());\n}\n\nlet controllerLocked = false;\n\n/**\n * Present an iOS App Store preview for a published app.\n * iOS only.\n *\n * @param options\n */\nexport async function presentPreviewAsync(\n  options: StoreReviewPreviewOptions\n): Promise<{ type: StoreReviewPreviewResultType }> {\n  if (!StoreReview.presentPreviewAsync)\n    throw new UnavailabilityError('StoreReview', 'presentPreviewAsync');\n  if (typeof options.itemId !== 'number')\n    throw new CodedError(\n      'ERR_STORE_REVIEW_PREVIEW_INVALID_OPTIONS',\n      'A valid itemId number must be provided.'\n    );\n\n  // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n  // support it this makes the behavior predictable.\n  if (controllerLocked) {\n    if (__DEV__) {\n      console.warn(\n        'Attempted to call StoreReview.presentPreviewAsync multiple times while already active. Only one iTunes preview can be active at any given time.'\n      );\n    }\n\n    return { type: 'locked' };\n  }\n\n  // About to present preview, set lock\n  controllerLocked = true;\n\n  let result;\n  try {\n    result = await StoreReview.presentPreviewAsync(options);\n  } finally {\n    // Preview complete, unset lock\n    controllerLocked = false;\n  }\n\n  return result;\n}\n\n/**\n * Dismiss the currently presented App Store preview controller.\n * iOS only.\n */\nexport async function dismissPreviewAsync(): Promise<void> {\n  if (!StoreReview.dismissPreviewAsync)\n    throw new UnavailabilityError('StoreReview', 'dismissPreviewAsync');\n  return StoreReview.dismissPreviewAsync();\n}\n\nexport { StoreReviewPreviewOptions, StoreReviewPreviewResultType };\n"]}